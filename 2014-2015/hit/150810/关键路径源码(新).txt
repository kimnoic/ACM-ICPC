void work()
{
    memset(ve, 0, sizeof(ve));      //初始化
    memset(vl, 0x3f, sizeof(vl));
    while(!Q.empty()) Q.pop();
    while(!S.empty()) S.pop();

    for(int i = 0; i < n; i++)
        if(du[i] == 0) Q.push(i);
    while(!Q.empty()){          //拓扑排序+最早开始时间
        int now = Q.front(); Q.pop();
        S.push(now);                    //记录逆拓扑序列
		for(int k = head[now]; k != -1; k = e[k].next){
			int ed = e[k].y;
            du[ed]--;
            if(du[ed] == 0) Q.push(ed);
            ve[ed] = max(ve[ed], ve[now] + e[k].w);
            ans = max(ans, ve[ed]);
		}
    }

    vl[n - 1] = ve[n - 1];        //最晚开始时间
    while(!S.empty()){
        int now = S.top(); S.pop();
        for(int k = head[now]; k != -1; k = e[k].next){
	    int ed = e[k].y;
            vl[ed] = min(vl[ed], vl[now] + e[k].w);
	}
    }
}